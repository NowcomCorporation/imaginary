version: '3'
services:
  worker:
    image: h2non/imaginary
    entrypoint: "/go/bin/imaginary -cors -gzip -concurrency 10 -enable-url-source"
    ports: ["9000"]
    networks:
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  frontend_cache:
    image: tutum/varnish
    environment:
      CONTENT: "-f /etc/varnish/default.vcl"
      BACKEND_PORT: '9000'
      CACHE: "file,/var/lib/varnish/varnish_frontend_storage.bin,5g"
    volumes:
    - ./frontend.vcl:/etc/varnish/default.vcl
    ports:
      - 80:80/tcp
    networks:
      - frontend
      - backend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]

  backend_cache:
    image: tutum/varnish
    environment:
      CONTENT: "-f /etc/varnish/default.vcl"
      BACKEND_PORT: '9001'
      CACHE: "file,/var/lib/varnish/varnish_backend_storage.bin,5g"
    volumes:
    - ./backend.vcl:/etc/varnish/default.vcl
    ports:
      - 81:80/tcp
    networks:
      - backend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role != manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    networks:
      - frontend
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:
